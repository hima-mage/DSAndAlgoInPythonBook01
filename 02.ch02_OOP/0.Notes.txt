# Goals, Principles, and Patterns
As the name implies, the main “actors” in the object-oriented paradigm are called
objects. Each object is an instance of a class.
The class deﬁnition typically speciﬁes instance variables,
also known as data members, that the object contains, as well as the methods, also
known as member functions

# 01 Object-Oriented Design Goals : Software implementations should achieve robustness, adaptability, and reusability

    # Robustness
    Every good programmer wants to develop software that is correct, which means that
    a program produces the right output for all the anticipated inputs in the program’s
    application. In addition, we want software to be robust, that is, capable of handling
    unexpected inputs that are not explicitly deﬁned for its application. For example,
    if a program is expecting a positive integer (perhaps representing the price of an
    item) and instead is given a negative integer, then the program should be able to
    recover gracefully from this error. More importantly, in life-critical applications,
    where a software error can lead to injury or loss of life,

    # Adaptability
    Modern software applications, such as Web browsers and Internet search engines,
    typically involve large programs that are used for many years. Software, there-
    fore, needs to be able to evolve over time in response to changing conditions in its
    environment. Thus, another important goal of quality software is that it achieves
    adaptability (also called evolvability). Related to this concept is portability, which
    is the ability of software to run with minimal change on different hardware and
    operating system platforms. An advantage of writing software in Python is the
    portability provided by the language itself.

    # Reusability
    Going hand in hand with adaptability is the desire that software be reusable, that
    is, the same code should be usable as a component of different systems in various
    applications. Developing quality software can be an expensive enterprise, and its
    cost can be offset somewhat if the software is designed in a way that makes it easily
    reusable in future applications.


# Object-Oriented Design Principles : Modularity & Abstraction & Encapsulation

    # Modularity :
        -   Modern software systems typically consist of several different components that
            must interact correctly in order for the entire system to work properly. Keeping
            these interactions straight requires that these different components be well organized.
            Modularity refers to an organizing principle in which different components
            of a software system are divided into separate functional units.
        - a module is a collection of closely related functions and
            classes that are deﬁned together in a single ﬁle of source code.
        - The use of modularity helps support the goals listed in Section 2.1.1.
            Robustness is greatly increased because it is easier to test and debug separate components
            before they are integrated into a larger software system.

    # Abstraction :
        - The notion of abstraction is to distill a complicated system down to its most funda-
            mental parts. Typically, describing the parts of a system involves naming them and
            explaining their functionality. Applying the abstraction paradigm to the design of
            data structures gives rise to abstract data types (ADTs). An ADT is a mathematical
            model of a data structure that speciﬁes the type of data stored, the operations sup-
            ported on them, and the types of parameters of the operations. An ADT speciﬁes
            what each operation does, but not how it does it. We will typically refer to the
            collective set of behaviors supported by an ADT as its public interface.

        - As a programming language, Python provides a great deal of latitude in regard
            to the speciﬁcation of an interface. Python has a tradition of treating abstractions
            implicitly using a mechanism known as duck typing. As an interpreted and dy-
            namically typed language, there is no “compile time” checking of data types in
            Python, and no formal requirement for declarations of abstract base classes. In-
            stead programmers assume that an object supports a set of known behaviors, with
            the interpreter raising a run-time error if those assumptions fail. The description
            of this as “duck typing” comes from an adage attributed to poet James Whitcomb
            Riley, stating that “when I see a bird that walks like a duck and swims like a duck
            and quacks like a duck, I call that bird a duck.”

        - More formally, Python supports abstract data types using a mechanism known
            as an abstract base class (ABC). An abstract base class cannot be instantiated
            (i.e., you cannot directly create an instance of that class), but it deﬁnes one or more
            common methods that all implementations of the abstraction must have. An ABC
            is realized by one or more concrete classes that inherit from the abstract base class
            while providing implementations for those method declared by the ABC.

    # Encapsulation

        - Another important principle of object-oriented design is encapsulation. Different
            components of a software system should not reveal the internal details of their
            respective implementations. One of the main advantages of encapsulation is that it
            gives one programmer freedom to implement the details of a component, without
            concern that other programmers will be writing code that intricately depends on
            those internal decisions.

        - Encapsulation yields robustness
            and adaptability, for it allows the implementation details of parts of a program to
            change without adversely affecting other parts, thereby making it easier to ﬁx bugs
            or add new functionality with relatively local changes to a component.

        - By convention, names of members of a class (both data members
            and member functions) that start with a single underscore character (e.g., _secret)
            are assumed to be nonpublic and should not be relied upon. Those conventions
            are reinforced by the intentional omission of those members from automatically
            generated documentation.


# Design Patterns :
    - These design patterns fall into two groups—patterns for solving algorithm design prob-
        lems and patterns for solving software engineering problems.


# 02 Software Development :
    1. Design
    2. Implementation
    3. Testing and Debugging


# Design :
    - For object-oriented programming, the design step is perhaps the most important
        phase in the process of developing software. For it is in the design step that we
        decide how to divide the workings of our program into classes, we decide how
        these classes will interact, what data each will store, and what actions each will
        perform.

    1.Responsibilities:
        - Divide the work into different actors, each with a different
            responsibility. Try to describe responsibilities using action verbs. These
            actors will form the classes for the program.
    2.Independence:
        - Deﬁne the work for each class to be as independent from
            other classes as possible. Subdivide responsibilities between classes so that
            each class has autonomy over some aspect of the program
    3.Behaviors:
        - Deﬁne the behaviors for each class carefully and precisely, so
            that the consequences of each action performed by a class will be well un-
            derstood by other classes that interact with it.

    - Deﬁning the classes, together with their instance variables and methods, are key
        to the design of an object-oriented program. A good programmer will naturally
        develop greater skill in performing these tasks over time, as experience teaches
        him or her to notice patterns in the requirements of a program that match patterns
        that he or she has seen before.

    - A common tool for developing an initial high-level design for a project is the
        use of CRC cards. Class-Responsibility-Collaborator (CRC) cards are simple in-
        dex cards that subdivide the work required of a program. The main idea behind this
        tool is to have each card represent a component,

    - As the design takes form, a standard approach to explain and document the
        design is the use of UML (Uniﬁed Modeling Language) diagrams to express the
        organization of a program. UML diagrams are a standard visual notation to express
        object-oriented software designs. Several computer-aided tools are available to
        build UML diagrams. One type of UML ﬁgure is known as a class diagram.

# Pseudo-Code :
    - As an intermediate step before the implementation of a design, programmers are
        often asked to describe algorithms in a way that is intended for human eyes only.
        Such descriptions are called pseudo-code. Pseudo-code is not a computer program,
        but is more structured than usual prose. It is a mixture of natural language and
        high-level programming constructs that describe the main ideas behind a generic
        implementation of a data structure or algorithm

# Coding Style and Documentation :
    - Programs should be made easy to read and understand. Good programmers should
        therefore be mindful of their coding style, and develop a style that communicates
        the important aspects of a program’s design for both humans and computers.

    - Python code blocks are typically indented by 4 spaces.
    - Use meaningful names for identiﬁers. Try to choose names that can be read aloud :
         - Classes (other than Python’s built-in classes) should have a name that
                serves as a singular noun, and should be capitalized
         - Functions : including member functions of a class, should be lowercase.
                    If multiple words are combined, they should be separated by under-
                    scores (e.g., make payment). The name of a function should typically
                    be a verb that describes its affect.
        - Names that identify an individual object , using a single uppercase
                letter to designate the name of a data structure.
        - Identiﬁers that represent a value considered to be a constant are tradi-
            tionally identiﬁed using all capital letters and with underscores to sep-
            arate words (e.g., MAX SIZE).

# Documentation :
    - Python provides integrated support for embedding formal documentation directly
        in source code using a mechanism known as a docstring.

# Testing and Debugging :
    - A careful testing plan is an essential part of writing a program. While verifying the
        correctness of a program over all possible inputs is usually infeasible,
    - There are two main testing strategies,
        - top-down and bottom-up, which differ in the order in which components are tested.
            Top-down testing proceeds from the top to the bottom of the program hierarchy.
            It is typically used in conjunction with stubbing, a boot-strapping technique that
            replaces a lower-level component with a stub, a replacement for the component
            that simulates the functionality of the original. For example, if function A calls
            function B to get the ﬁrst line of a ﬁle, when testing A we can replace B with a stub
            that returns a ﬁxed string.
        - Bottom-up testing proceeds from lower-level components to higher-level com-
            ponents. For example, bottom-level functions, which do not invoke other functions,
            are tested ﬁrst, followed by functions that call only bottom-level functions, and so
            on. Similarly a class that does not depend upon any other classes can be tested
            before another class that depends on the former. This form of testing is usually
            described as unit testing,

    -  the act of regression
        testing is used, whereby all previous tests are re-executed to ensure that changes to
        the software do not introduce new bugs in previously tested components.
    - Debugging :
        - The simplest debugging technique consists of using print statements to track the
            values of variables during the execution of the program. A problem with this ap-
            proach is that eventually the print statements need to be removed or commented
            out, so they are not executed when the software is ﬁnally released.
        - A better approach is to run the program within a debugger, which is a special-
            ized environment for controlling and monitoring the execution of a program. The
            basic functionality provided by a debugger is the insertion of breakpoints within
            the code. When the program is executed within the debugger, it stops at each
            breakpoint. While the program is stopped, the current value of variables can be
            inspected.
        - The standard Python distribution includes a module named pdb, which provides
            debugging support directly within the interpreter. Most IDEs for Python, such as
            IDLE, provide debugging environments with graphical user interfaces.

# 3 Class definition
    - A class serves as the primary means for abstraction in object-oriented program-
        ming. In Python, every piece of data is represented as an instance of some class.
        A class provides a set of behaviors in the form of member functions (also known
        as methods), with implementations that are common to all instances of that class.
        A class also serves as a blueprint for its instances, effectively determining the way
        that state information for each instance is represented in the form of attributes (also
        known as ﬁelds, instance variables, or data members).
    - The self Identiﬁer
    - The Constructor : cc = CreditCard( John Doe, 1st Bank , 5391 0375 9387 5309 , 1000)
    - this results in a call to the specially named __init__ method that serves
            as the constructor of the class.
    - underscore in the name of a data member, such as balance, implies that it is intended as nonpublic.

# Operator Overloading and Python’s Special Methods
    - By default, the + operator is undeﬁned for a new class. However, the author
        of a class may provide a deﬁnition using a technique known as operator overload-
        ing. This is done by implementing a specially named method. In particular, the
        + operator is overloaded by implementing a method named add , which takes
        the right-hand operand as a parameter and which returns the result of the expres-
        sion. That is, the syntax, a + b, is converted to a method call on object a of the
        form, a. add (b).

    - Non-Operator Overloads :
    - Implied Methods

# Iterators :
    - Iteration is an important concept in the design of data structures. We introduced
        Python’s mechanism for iteration in Section 1.8. In short, an iterator for a collec-
        tion provides one key behavior: It supports a special method named next that
        returns the next element of the collection, if any, or raises a StopIteration exception
        to indicate that there are no further elements.
    - it is rare to have to directly implement an iterator class. Our pre-
        ferred approach is the use of the generator syntax (also described in Section 1.8),
        which automatically produces an iterator of yielded values.


# 4 Inheritance
    - A hierarchical design is useful in software development, as common function-
        ality can be grouped at the most general level, thereby promoting reuse of code,
        while differentiated behaviors can be viewed as extensions of the general case, In
        object-oriented programming, the mechanism for a modular and hierarchical orga-
        nization is a technique known as inheritance. This allows a new class to be deﬁned
        based upon an existing class as the starting point. In object-oriented terminology,
        the existing class is typically described as the base class, parent class, or super-
        class, while the newly deﬁned class is known as the subclass or child class.

    - There are two ways in which a subclass can differentiate itself from its su-
        perclass. A subclass may specialize an existing behavior by providing a new im-
        plementation that overrides an existing method. A subclass may also extend its
        superclass by providing brand new methods.

    - Another example of a rich inheritance hierarchy is the organization of various ex-
        ception types in Python
    - Protected Members :
        - Python does not support formal access control, but names beginning with a sin-
            gle underscore are conventionally akin to protected, while names beginning with a
            double underscore (other than special methods) are akin to private.
    - Abstract Base Classes :
        - in classic object-oriented terminology, we say a class is an abstract base class
            if its only purpose is to serve as a base class through inheritance. More formally,
            an abstract base class is one that cannot be directly instantiated, while a concrete
            class is one that can be instantiated.

        - Our reason for focusing on abstract base classes in our study of data structures
            is that Python’s collections module provides several abstract base classes that assist
            when deﬁning custom data structures that share a common interface with some of
            Python’s built-in data structures. These rely on an object-oriented software design
            pattern known as the template method pattern. The template method pattern is
            when an abstract base class provides concrete behaviors that rely upon calls to
            other abstract behaviors. In that way, as soon as a subclass provides deﬁnitions for
            the missing abstract behaviors, the inherited concrete behaviors are well deﬁned

# Namespace :
    - A namespace is an abstraction that manages all of the identiﬁers that are deﬁned in
        a particular scope, mapping each name to its associated value. In Python, functions,
        classes, and modules are all ﬁrst-class objects, and so the “value” associated with
        an identiﬁer in a namespace may in fact be a function, class, or module.

    - the instance namespace, which manages attributes speciﬁc to an individual object.
    - There is a separate class namespace for each class that has been deﬁned.
    - Nested Classes :
            - Nesting one class in the scope of another makes clear that the nested class
                exists for support of the outer class. Furthermore, it can help reduce potential name
                conﬂicts, because it allows for a similarly named class to exist in another context.
                For example, we will later introduce a data structure known as a linked list and will
                deﬁne a nested node class to store the individual components of the list. We will
                also introduce a data structure known as a tree that depends upon its own nested

    - Dictionaries and the __slots__ Declaration : Python represents each namespace with an instance of
            the built-in dict class
    - Name Resolution and Dynamic Dispatch :
        - such as obj.foo, the Python interpreter begins a name resolution process, described as follows:
            1. The instance namespace is searched; if the desired name is found, its associ-
            ated value is used.
            2. Otherwise the class namespace, for the class to which the instance belongs,
            is searched; if the name is found, its associated value is used.
            3. If the name was not found in the immediate class namespace, the search con-
            tinues upward through the inheritance hierarchy, checking the class name-
            space for each ancestor (commonly by checking the superclass class, then its
            superclass class, and so on). The ﬁrst time the name is found, its associate
            value is used.
            4. If the name has still not been found, an AttributeError is raised.

        - In traditional object-oriented terminol-
            ogy, Python uses what is known as dynamic dispatch (or dynamic binding) to
            determine, at run-time, which implementation of a function to call based upon the
            type of the object upon which it is invoked. This is in contrast to some languages
            that use static dispatching, making a compile-time decision as to which version of
            a function to call, based upon the declared type of a variable.



# 6 Shallow and Deep Copying :

    - palette = list(warmtones)
        In this case, we explicitly call the list constructor, sending the ﬁrst list as a param-
        eter. This causes a new list to be created, as shown in Figure 2.10; however, it is
        what is known as a shallow copy. The new list is initialized so that its contents are
        precisely the same as the original sequence. However, Python’s lists are referential
        (see page 9 of Section 1.2.3), and so the new list represents a sequence of references
        to the same elements as in the ﬁrst.

    - if we edit a color instance from the palette list, we effectively change the contents of
        warmtones. Although palette and warmtones are distinct lists, there remains indi-
        rect aliasing, for example, with palette[0] and warmtones[0] as aliases for the same
        color instance.

    - We prefer that palette be what is known as a deep copy of warmtones. In a
        deep copy, the new copy references its own copies of those objects referenced by
        the original version.

    - Python provides a very convenient module, named
        copy, that can produce both shallow copies and deep copies of arbitrary objects.

    - This module supports two functions: the copy function creates a shallow copy
        of its argument, and the deepcopy function creates a deep copy of its argument.
        After importing the module, we may create a deep copy for our example, as shown
        in Figure 2.11, using the command:
                palette = copy.deepcopy(warmtones)